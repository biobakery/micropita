#######################################################
# Author: Timothy Tickle
# Description: Class to test the MLPTDistanceAdaptor class
#######################################################

__author__ = "Timothy Tickle"
__copyright__ = "Copyright 2011"
__credits__ = ["Timothy Tickle"]
__license__ = "GPL"
__version__ = "1.0"
__maintainer__ = "Timothy Tickle"
__email__ = "ttickle@sph.harvard.edu"
__status__ = "Development"

#Import libraries
from Diversity import Diversity
from KMedoids import Kmedoids,Minkowski
from MLPYDistanceAdaptor import MLPYDistanceAdaptor
import numpy as np
import unittest

##
#Tests the Diversity object
class MLPYDistanceAdaptorTest(unittest.TestCase):

    #Test if the MLPY Adaptor is working correctly in general.
    #If given a metric that is normally calculated by kmedoids and does not need the custom MLPYDistanceAdaptor
    #Does given the same data, kmedoids with the MLPYDistanceAdaptor generate the same results as kmedoids without the adaptor
    def testGenerallyInKMedoidsContextForGoodCaseDTW3Clusters(self):
        
        #Inputs
        x = np.array([[1.0, 1.5],
                      [1.1, 1.8],
                      [2.0, 2.8],
                      [3.2, 3.1],
                      [3.4, 3.2]])
        tempNumberClusters = 3

        #Error associated
        errorFound = False
        errorString = ""

        #Correct Answer
        #Results generated by kmedoids without adaptor
        #Using Minkowski distance p=1 is euclidean distance
        dtw = Minkowski(618)
        km = Kmedoids(k=tempNumberClusters,dist=dtw)
        kMedoidsAnswer = km.compute(x)
        #Correct answer as defined in the mlpy manual, example for Kmedoids "mlpy: machine learning py" Release 2.2.2 page 19
        kMedoidsCorrectAnswer = "(array([4, 0, 2]), array([3, 1]), array([0, 1]), 0.072499999999999981)"

        #Check if the standard mlpy installation is working
        if(not str(kMedoidsAnswer) == kMedoidsCorrectAnswer):
            errorString = errorString + " The mlpy implementation of kMedoids did not give the correct output as defined by their documentation.\nReceived:."+str(kMedoidsAnswer)+".\nExpected:."+str(kMedoidsCorrectAnswer)+"."
            errorFound = True

        #Call method
        #Run kmedoids with adaptor
        #Generate condensed distance matrix
        distanceMatrix = []
        xLength = len(x)
        for index in xrange(0,xLength):
            for iindex in xrange(index+1,xLength):
                distanceMatrix.append(dtw.compute(x[index],x[iindex]))

        #Make distance object and set up kMedoids
        distance = MLPYDistanceAdaptor(npaDistanceMatrix=distanceMatrix, fIsCondensedMatrix=True)
        medoidsMaker = Kmedoids(k=tempNumberClusters, dist=distance)

        #Build a matrix of lists of indicies to pass to KMediods compute
        indicesMatrix = []
        for indexPosition in xrange(0,len(x)):
            indicesMatrix.append([indexPosition])
        result = medoidsMaker.compute(np.array(indicesMatrix))

        #Check if the standard mlpy installation is working
        if(not str(result) == kMedoidsCorrectAnswer):
            errorString = errorString + " The KMedoids with the custom distance did not match the correct output as defined by mlpy documentation.\nReceived:."+str(result)+".\nExpected:."+str(kMedoidsCorrectAnswer)+"."
            errorFound = True

        #Check result against answer
        self.assertEqual(False,errorFound,errorString)

##
#Creates a suite of tests
def suite():
    suite = unittest.TestLoader().loadTestsFromTestCase(MLPYDistanceAdaptorTest)
    return suite
